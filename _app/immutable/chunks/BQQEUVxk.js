import{e as y,a as r,y as i,T as g,Q as f,D as Y,b as m,s as D}from"./Df_ahsfi.js";import{i as p}from"./C-3OFcxD.js";class h{constructor(t,e){const s=new Date;this.startOfYear=new Date(t,0),this.endOfYear=y(this.startOfYear),this.todayOrEndOfYear=s.getFullYear===this.startOfYear.getFullYear?s:this.endOfYear,this.hPd=h.roundTo(e/5,2),this.allDatesUpToToday=r({start:this.startOfYear,end:this.todayOrEndOfYear}),this.allDatesOfYear=r({start:this.startOfYear,end:this.endOfYear}),this.allDatesRemaining=r({start:this.todayOrEndOfYear,end:this.endOfYear})}static collectStatistics(t,e,s,c){const a={total:0,home:0,office:0};for(const n of t){const l=i.getDay(n),o=g.aggregateDurationsByType(l.timesheet),d=Object.values(o).reduce((O,u)=>O+u,0);a.total+=d,a.home+=(o==null?void 0:o[f.Home])??0,a.office+=(o==null?void 0:o[f.Office])??0,e!==null&&Y.equal(n,e)&&(console.log("Correct homeoffice quota"),a.total=c,a.home=a.total*s,a.office=a.total*(1-s))}return a}getRemainingAccountableDatesOfYear(){const t=[];for(const e of this.allDatesRemaining){const s=i.getDay(e);p(e)||s.dayType===m.Regular&&t.push(e)}return t}getRemainingHoursInHomeOffice(t){return D.rune.contract.homeOfficeQuota*(t.total+this.getRemainingAccountableDatesOfYear().length*this.hPd)-t.home}static roundTo(t,e=2){return t=isNaN(t)?0:t,Math.round(t*10**e)/10**e}}export{h as S};
