var e=Object.defineProperty;var g=(s,o,i)=>o in s?e(s,o,{enumerable:!0,configurable:!0,writable:!0,value:i}):s[o]=i;var L=(s,o,i)=>g(s,typeof o!="symbol"?o+"":o,i);const n=class n{constructor(){this.config={logLevel:n.LOG_LEVELS.INFO,isLoggingEnabled:!0},this.originalLog=console.log,this.originalInfo=console.info,this.originalWarn=console.warn,this.originalError=console.error}overrideConsole(){const o=i=>this.config.isLoggingEnabled&&i<=this.config.logLevel;console.log=(...i)=>{o(n.LOG_LEVELS.LOG)&&this.originalLog.apply(console,i)},console.info=(...i)=>{o(n.LOG_LEVELS.INFO)&&this.originalInfo.apply(console,i)},console.warn=(...i)=>{o(n.LOG_LEVELS.WARN)&&this.originalWarn.apply(console,i)},console.error=(...i)=>{o(n.LOG_LEVELS.ERROR)&&this.originalError.apply(console,i)}}setLogLevel(o){Object.values(n.LOG_LEVELS).includes(o)&&(this.config.logLevel=o)}setLoggingEnabled(o){this.config.isLoggingEnabled=o}};L(n,"LOG_LEVELS",{NONE:0,ERROR:1,WARN:2,INFO:3,LOG:4});let l=n;const E=new l,c=l.LOG_LEVELS;export{c as L,E as l};
